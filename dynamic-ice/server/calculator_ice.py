# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `calculator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module CalcModule
_M_CalcModule = Ice.openModule('CalcModule')
__name__ = 'CalcModule'

if '_t_DoubleSeq' not in _M_CalcModule.__dict__:
    _M_CalcModule._t_DoubleSeq = IcePy.defineSequence('::CalcModule::DoubleSeq', (), IcePy._t_double)

if '_t_IntSeq' not in _M_CalcModule.__dict__:
    _M_CalcModule._t_IntSeq = IcePy.defineSequence('::CalcModule::IntSeq', (), IcePy._t_int)

if 'GenericError' not in _M_CalcModule.__dict__:
    _M_CalcModule.GenericError = Ice.createTempClass()
    class GenericError(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::CalcModule::GenericError'

    _M_CalcModule._t_GenericError = IcePy.defineException('::CalcModule::GenericError', GenericError, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    GenericError._ice_type = _M_CalcModule._t_GenericError

    _M_CalcModule.GenericError = GenericError
    del GenericError

if 'ZeroDivisionErr' not in _M_CalcModule.__dict__:
    _M_CalcModule.ZeroDivisionErr = Ice.createTempClass()
    class ZeroDivisionErr(_M_CalcModule.GenericError):
        def __init__(self, reason=''):
            _M_CalcModule.GenericError.__init__(self, reason)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::CalcModule::ZeroDivisionErr'

    _M_CalcModule._t_ZeroDivisionErr = IcePy.defineException('::CalcModule::ZeroDivisionErr', ZeroDivisionErr, (), False, _M_CalcModule._t_GenericError, ())
    ZeroDivisionErr._ice_type = _M_CalcModule._t_ZeroDivisionErr

    _M_CalcModule.ZeroDivisionErr = ZeroDivisionErr
    del ZeroDivisionErr

_M_CalcModule._t_Calculator = IcePy.defineValue('::CalcModule::Calculator', Ice.Value, -1, (), False, True, None, ())

if 'CalculatorPrx' not in _M_CalcModule.__dict__:
    _M_CalcModule.CalculatorPrx = Ice.createTempClass()
    class CalculatorPrx(Ice.ObjectPrx):

        def divide(self, a, b, context=None):
            return _M_CalcModule.Calculator._op_divide.invoke(self, ((a, b), context))

        def divideAsync(self, a, b, context=None):
            return _M_CalcModule.Calculator._op_divide.invokeAsync(self, ((a, b), context))

        def begin_divide(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_CalcModule.Calculator._op_divide.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_divide(self, _r):
            return _M_CalcModule.Calculator._op_divide.end(self, _r)

        def subtract(self, a, b, context=None):
            return _M_CalcModule.Calculator._op_subtract.invoke(self, ((a, b), context))

        def subtractAsync(self, a, b, context=None):
            return _M_CalcModule.Calculator._op_subtract.invokeAsync(self, ((a, b), context))

        def begin_subtract(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_CalcModule.Calculator._op_subtract.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_subtract(self, _r):
            return _M_CalcModule.Calculator._op_subtract.end(self, _r)

        def map(self, nums, context=None):
            return _M_CalcModule.Calculator._op_map.invoke(self, ((nums, ), context))

        def mapAsync(self, nums, context=None):
            return _M_CalcModule.Calculator._op_map.invokeAsync(self, ((nums, ), context))

        def begin_map(self, nums, _response=None, _ex=None, _sent=None, context=None):
            return _M_CalcModule.Calculator._op_map.begin(self, ((nums, ), _response, _ex, _sent, context))

        def end_map(self, _r):
            return _M_CalcModule.Calculator._op_map.end(self, _r)

        def getDescription(self, context=None):
            return _M_CalcModule.Calculator._op_getDescription.invoke(self, ((), context))

        def getDescriptionAsync(self, context=None):
            return _M_CalcModule.Calculator._op_getDescription.invokeAsync(self, ((), context))

        def begin_getDescription(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_CalcModule.Calculator._op_getDescription.begin(self, ((), _response, _ex, _sent, context))

        def end_getDescription(self, _r):
            return _M_CalcModule.Calculator._op_getDescription.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_CalcModule.CalculatorPrx.ice_checkedCast(proxy, '::CalcModule::Calculator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_CalcModule.CalculatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::CalcModule::Calculator'
    _M_CalcModule._t_CalculatorPrx = IcePy.defineProxy('::CalcModule::Calculator', CalculatorPrx)

    _M_CalcModule.CalculatorPrx = CalculatorPrx
    del CalculatorPrx

    _M_CalcModule.Calculator = Ice.createTempClass()
    class Calculator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::CalcModule::Calculator', '::Ice::Object')

        def ice_id(self, current=None):
            return '::CalcModule::Calculator'

        @staticmethod
        def ice_staticId():
            return '::CalcModule::Calculator'

        def divide(self, a, b, current=None):
            raise NotImplementedError("servant method 'divide' not implemented")

        def subtract(self, a, b, current=None):
            raise NotImplementedError("servant method 'subtract' not implemented")

        def map(self, nums, current=None):
            raise NotImplementedError("servant method 'map' not implemented")

        def getDescription(self, current=None):
            raise NotImplementedError("servant method 'getDescription' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_CalcModule._t_CalculatorDisp)

        __repr__ = __str__

    _M_CalcModule._t_CalculatorDisp = IcePy.defineClass('::CalcModule::Calculator', Calculator, (), None, ())
    Calculator._ice_type = _M_CalcModule._t_CalculatorDisp

    Calculator._op_divide = IcePy.Operation('divide', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0)), (), ((), IcePy._t_double, False, 0), (_M_CalcModule._t_ZeroDivisionErr,))
    Calculator._op_subtract = IcePy.Operation('subtract', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0)), (), ((), IcePy._t_double, False, 0), ())
    Calculator._op_map = IcePy.Operation('map', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_CalcModule._t_IntSeq, False, 0),), (), ((), _M_CalcModule._t_DoubleSeq, False, 0), (_M_CalcModule._t_ZeroDivisionErr,))
    Calculator._op_getDescription = IcePy.Operation('getDescription', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_CalcModule.Calculator = Calculator
    del Calculator

# End of module CalcModule
