# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `printer.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module PrinterModule
_M_PrinterModule = Ice.openModule('PrinterModule')
__name__ = 'PrinterModule'

if '_t_StringSeq' not in _M_PrinterModule.__dict__:
    _M_PrinterModule._t_StringSeq = IcePy.defineSequence('::PrinterModule::StringSeq', (), IcePy._t_string)

if 'GenericError' not in _M_PrinterModule.__dict__:
    _M_PrinterModule.GenericError = Ice.createTempClass()
    class GenericError(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::PrinterModule::GenericError'

    _M_PrinterModule._t_GenericError = IcePy.defineException('::PrinterModule::GenericError', GenericError, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    GenericError._ice_type = _M_PrinterModule._t_GenericError

    _M_PrinterModule.GenericError = GenericError
    del GenericError

if 'InvalidCountError' not in _M_PrinterModule.__dict__:
    _M_PrinterModule.InvalidCountError = Ice.createTempClass()
    class InvalidCountError(_M_PrinterModule.GenericError):
        def __init__(self, reason=''):
            _M_PrinterModule.GenericError.__init__(self, reason)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::PrinterModule::InvalidCountError'

    _M_PrinterModule._t_InvalidCountError = IcePy.defineException('::PrinterModule::InvalidCountError', InvalidCountError, (), False, _M_PrinterModule._t_GenericError, ())
    InvalidCountError._ice_type = _M_PrinterModule._t_InvalidCountError

    _M_PrinterModule.InvalidCountError = InvalidCountError
    del InvalidCountError

_M_PrinterModule._t_Printer = IcePy.defineValue('::PrinterModule::Printer', Ice.Value, -1, (), False, True, None, ())

if 'PrinterPrx' not in _M_PrinterModule.__dict__:
    _M_PrinterModule.PrinterPrx = Ice.createTempClass()
    class PrinterPrx(Ice.ObjectPrx):

        def printDuplicated(self, strings, count, context=None):
            return _M_PrinterModule.Printer._op_printDuplicated.invoke(self, ((strings, count), context))

        def printDuplicatedAsync(self, strings, count, context=None):
            return _M_PrinterModule.Printer._op_printDuplicated.invokeAsync(self, ((strings, count), context))

        def begin_printDuplicated(self, strings, count, _response=None, _ex=None, _sent=None, context=None):
            return _M_PrinterModule.Printer._op_printDuplicated.begin(self, ((strings, count), _response, _ex, _sent, context))

        def end_printDuplicated(self, _r):
            return _M_PrinterModule.Printer._op_printDuplicated.end(self, _r)

        def printRange(self, startNum, endNum, step, context=None):
            return _M_PrinterModule.Printer._op_printRange.invoke(self, ((startNum, endNum, step), context))

        def printRangeAsync(self, startNum, endNum, step, context=None):
            return _M_PrinterModule.Printer._op_printRange.invokeAsync(self, ((startNum, endNum, step), context))

        def begin_printRange(self, startNum, endNum, step, _response=None, _ex=None, _sent=None, context=None):
            return _M_PrinterModule.Printer._op_printRange.begin(self, ((startNum, endNum, step), _response, _ex, _sent, context))

        def end_printRange(self, _r):
            return _M_PrinterModule.Printer._op_printRange.end(self, _r)

        def printFibonacci(self, count, context=None):
            return _M_PrinterModule.Printer._op_printFibonacci.invoke(self, ((count, ), context))

        def printFibonacciAsync(self, count, context=None):
            return _M_PrinterModule.Printer._op_printFibonacci.invokeAsync(self, ((count, ), context))

        def begin_printFibonacci(self, count, _response=None, _ex=None, _sent=None, context=None):
            return _M_PrinterModule.Printer._op_printFibonacci.begin(self, ((count, ), _response, _ex, _sent, context))

        def end_printFibonacci(self, _r):
            return _M_PrinterModule.Printer._op_printFibonacci.end(self, _r)

        def getDescription(self, context=None):
            return _M_PrinterModule.Printer._op_getDescription.invoke(self, ((), context))

        def getDescriptionAsync(self, context=None):
            return _M_PrinterModule.Printer._op_getDescription.invokeAsync(self, ((), context))

        def begin_getDescription(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PrinterModule.Printer._op_getDescription.begin(self, ((), _response, _ex, _sent, context))

        def end_getDescription(self, _r):
            return _M_PrinterModule.Printer._op_getDescription.end(self, _r)

        def getPrintedStringsNum(self, context=None):
            return _M_PrinterModule.Printer._op_getPrintedStringsNum.invoke(self, ((), context))

        def getPrintedStringsNumAsync(self, context=None):
            return _M_PrinterModule.Printer._op_getPrintedStringsNum.invokeAsync(self, ((), context))

        def begin_getPrintedStringsNum(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PrinterModule.Printer._op_getPrintedStringsNum.begin(self, ((), _response, _ex, _sent, context))

        def end_getPrintedStringsNum(self, _r):
            return _M_PrinterModule.Printer._op_getPrintedStringsNum.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_PrinterModule.PrinterPrx.ice_checkedCast(proxy, '::PrinterModule::Printer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_PrinterModule.PrinterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::PrinterModule::Printer'
    _M_PrinterModule._t_PrinterPrx = IcePy.defineProxy('::PrinterModule::Printer', PrinterPrx)

    _M_PrinterModule.PrinterPrx = PrinterPrx
    del PrinterPrx

    _M_PrinterModule.Printer = Ice.createTempClass()
    class Printer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PrinterModule::Printer')

        def ice_id(self, current=None):
            return '::PrinterModule::Printer'

        @staticmethod
        def ice_staticId():
            return '::PrinterModule::Printer'

        def printDuplicated(self, strings, count, current=None):
            raise NotImplementedError("servant method 'printDuplicated' not implemented")

        def printRange(self, startNum, endNum, step, current=None):
            raise NotImplementedError("servant method 'printRange' not implemented")

        def printFibonacci(self, count, current=None):
            raise NotImplementedError("servant method 'printFibonacci' not implemented")

        def getDescription(self, current=None):
            raise NotImplementedError("servant method 'getDescription' not implemented")

        def getPrintedStringsNum(self, current=None):
            raise NotImplementedError("servant method 'getPrintedStringsNum' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_PrinterModule._t_PrinterDisp)

        __repr__ = __str__

    _M_PrinterModule._t_PrinterDisp = IcePy.defineClass('::PrinterModule::Printer', Printer, (), None, ())
    Printer._ice_type = _M_PrinterModule._t_PrinterDisp

    Printer._op_printDuplicated = IcePy.Operation('printDuplicated', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_PrinterModule._t_StringSeq, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_PrinterModule._t_StringSeq, False, 0), (_M_PrinterModule._t_InvalidCountError,))
    Printer._op_printRange = IcePy.Operation('printRange', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_PrinterModule._t_StringSeq, False, 0), ())
    Printer._op_printFibonacci = IcePy.Operation('printFibonacci', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_PrinterModule._t_StringSeq, False, 0), (_M_PrinterModule._t_InvalidCountError,))
    Printer._op_getDescription = IcePy.Operation('getDescription', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Printer._op_getPrintedStringsNum = IcePy.Operation('getPrintedStringsNum', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_PrinterModule.Printer = Printer
    del Printer

# End of module PrinterModule
